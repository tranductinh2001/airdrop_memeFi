# meme.py

import asyncio
import json
import random
import string
import time
from datetime import datetime
from urllib.parse import unquote
import cloudscraper
import aiohttp  # Th√™m aiohttp cho c√°c y√™u c·∫ßu async
from utils.headers import get_random_headers  # Import h√†m m·ªõi t·ª´ headers.py
from utils.query import (
    QUERY_USER, QUERY_LOGIN, MUTATION_GAME_PROCESS_TAPS_BATCH,
    QUERY_BOOSTER, QUERY_NEXT_BOSS, QUERY_TASK_VERIF,
    QUERY_TASK_COMPLETED, QUERY_GET_TASK, QUERY_TASK_ID, QUERY_GAME_CONFIG
)

url = "https://api-gw-tg.memefi.club/graphql"

# ANSI color codes
black = "\033[0;30m"
red = "\033[0;31m"
green = "\033[0;32m"
yellow = "\033[0;33m"
blue = "\033[0;34m"
magenta = "\033[0;35m"
cyan = "\033[0;36m"
white = "\033[0;37m"
reset = "\033[0m"

def log(msg, color=white, account_info=""):
    now = datetime.now().isoformat(" ").split(".")[0]
    if account_info:
        print(f"{black}[{now}]{reset} [{account_info}] {color}{msg}{reset}")
    else:
        print(f"{black}[{now}]{reset} {color}{msg}{reset}")

def log2(message, color):
    print(f"{color}{message}\033[0m", end="\r")

def generate_random_nonce(length=52):
    characters = string.ascii_letters + string.digits
    return ''.join(random.choice(characters) for _ in range(length))

def format_proxy(proxy):
    """
    Chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng proxy t·ª´ ip:port:username:password sang http://username:password@ip:port
    N·∫øu proxy kh√¥ng c√≥ username v√† password, ch·ªâ chuy·ªÉn sang http://ip:port
    """
    parts = proxy.split(':')
    if len(parts) == 4:
        ip, port, username, password = parts
        return f"http://{username}:{password}@{ip}:{port}"
    elif len(parts) == 2:
        ip, port = parts
        return f"http://{ip}:{port}"
    else:
        log("‚ùå ƒê·ªãnh d·∫°ng proxy kh√¥ng h·ª£p l·ªá!", red)
        return None

class ProxyManager:
    def __init__(self, proxy_file):
        self.proxy_file = proxy_file
        self.all_proxies = self.load_proxies()
        self.valid_proxies = []
        self.lock = asyncio.Lock()  # ƒê·∫£m b·∫£o an to√†n khi truy c·∫≠p proxy trong m√¥i tr∆∞·ªùng b·∫•t ƒë·ªìng b·ªô

    def load_proxies(self):
        try:
            with open(self.proxy_file, 'r') as file:
                proxies = [line.strip() for line in file if line.strip()]
            if not proxies:
                log("‚ùå Danh s√°ch proxy tr·ªëng!", red)
            return proxies
        except FileNotFoundError:
            log(f"‚ùå Kh√¥ng t√¨m th·∫•y file proxy: {self.proxy_file}", red)
            return []

    async def get_random_proxy(self):
        async with self.lock:
            if not self.valid_proxies:
                log("‚ùå Kh√¥ng c√≤n proxy n√†o kh·∫£ d·ª•ng!", red)
                return None
            return random.choice(self.valid_proxies)

    async def mark_bad_proxy(self, proxy, account_info=""):
        async with self.lock:
            if proxy in self.valid_proxies:
                self.valid_proxies.remove(proxy)
                log(f"üî¥ Proxy b·ªã lo·∫°i b·ªè: {proxy}", red, account_info)
                if not self.valid_proxies:
                    log("‚ùå T·∫•t c·∫£ proxy ƒë·ªÅu kh√¥ng ho·∫°t ƒë·ªông!", red, account_info)

    async def validate_proxies(self):
        """
        Ki·ªÉm tra t·∫•t c·∫£ c√°c proxy v√† ch·ªâ gi·ªØ l·∫°i nh·ªØng proxy h·ª£p l·ªá.
        """
        log("üîç B·∫Øt ƒë·∫ßu ki·ªÉm tra c√°c proxy...", cyan)
        tasks = [self.check_proxy(proxy) for proxy in self.all_proxies]
        results = await asyncio.gather(*tasks)
        self.valid_proxies = [proxy for proxy, is_valid in zip(self.all_proxies, results) if is_valid]
        invalid_proxies = [proxy for proxy, is_valid in zip(self.all_proxies, results) if not is_valid]
        for proxy in invalid_proxies:
            log(f"‚ùå Proxy kh√¥ng h·ª£p l·ªá: {proxy}", red)
        log(f"‚úÖ Ho√†n t·∫•t ki·ªÉm tra proxy. S·ªë proxy h·ª£p l·ªá: {len(self.valid_proxies)}", green)
        if not self.valid_proxies:
            log("‚ùå Kh√¥ng c√≥ proxy n√†o h·ª£p l·ªá sau khi ki·ªÉm tra!", red)

    async def check_proxy(self, proxy):
        """
        Ki·ªÉm tra xem proxy c√≥ ho·∫°t ƒë·ªông kh√¥ng b·∫±ng c√°ch ki·ªÉm tra IP.
        """
        formatted_proxy = format_proxy(proxy)
        if not formatted_proxy:
            return False
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get('http://ip-api.com/json', proxy=formatted_proxy, timeout=10) as response:
                    if response.status != 200:
                        return False
                    ip_info = await response.json()
                    return ip_info.get('status') == 'success'
        except Exception:
            return False

async def fetch(account_line, proxy_manager, account_info="", user_agent=""):
    max_retries = 3
    for attempt in range(max_retries):
        proxy = await proxy_manager.get_random_proxy()
        if not proxy:
            log("‚ùå Kh√¥ng c√≥ proxy n√†o kh·∫£ d·ª•ng ƒë·ªÉ s·ª≠ d·ª•ng.", red, account_info)
            return None

        formatted_proxy = format_proxy(proxy)
        if not formatted_proxy:
            log("‚ùå ƒê·ªãnh d·∫°ng proxy kh√¥ng h·ª£p l·ªá sau khi chuy·ªÉn ƒë·ªïi!", red, account_info)
            await proxy_manager.mark_bad_proxy(proxy, account_info)
            continue

        try:
            with open('data.txt', 'r') as file:
                lines = file.readlines()
                raw_data = lines[account_line - 1].strip()

            tg_web_data = unquote(unquote(raw_data))
            query_id = tg_web_data.split('query_id=', maxsplit=1)[1].split('&user', maxsplit=1)[0]
            user_data = tg_web_data.split('user=', maxsplit=1)[1].split('&auth_date', maxsplit=1)[0]
            auth_date = tg_web_data.split('auth_date=', maxsplit=1)[1].split('&hash', maxsplit=1)[0]
            hash_ = tg_web_data.split('hash=', maxsplit=1)[1].split('&', maxsplit=1)[0]

            user_data_dict = json.loads(unquote(user_data))

            data = {
                "operationName": "MutationTelegramUserLogin",
                "variables": {
                    "webAppData": {
                        "auth_date": int(auth_date),
                        "hash": hash_,
                        "query_id": query_id,
                        "checkDataString": f"auth_date={auth_date}\nquery_id={query_id}\nuser={unquote(user_data)}",
                        "user": {
                            "id": user_data_dict["id"],
                            "allows_write_to_pm": user_data_dict["allows_write_to_pm"],
                            "first_name": user_data_dict["first_name"],
                            "last_name": user_data_dict["last_name"],
                            "username": user_data_dict.get("username", "Username kh√¥ng ƒë∆∞·ª£c ƒë·∫∑t"),
                            "language_code": user_data_dict["language_code"],
                            "version": "7.2",
                            "platform": "ios"
                        }
                    }
                },
                "query": QUERY_LOGIN
            }

            # S·ª≠ d·ª•ng cloudscraper v·ªõi proxy ƒë√£ ƒë·ªãnh d·∫°ng
            scraper = cloudscraper.create_scraper()
            proxies = {
                "http": formatted_proxy,
                "https": formatted_proxy
            }
            # L·∫•y headers ng·∫´u nhi√™n v·ªõi User-Agent t∆∞∆°ng ·ª©ng
            headers = get_random_headers(user_agent)

            # S·ª≠ d·ª•ng asyncio.to_thread ƒë·ªÉ ch·∫°y c√°c l·ªánh ƒë·ªìng b·ªô trong lu·ªìng ri√™ng
            response = await asyncio.to_thread(scraper.post, url, headers=headers, json=data, proxies=proxies)
            json_response = response.json()

            if 'errors' in json_response:
                log("C√≥ l·ªói trong ph·∫£n h·ªìi. ƒêang th·ª≠ l·∫°i...", yellow, account_info)
            else:
                access_token = json_response['data']['telegramUserLogin']['access_token']
                return access_token

        except Exception as e:
            log(f"‚ùå L·ªói kh√¥ng mong mu·ªën: {e}. ƒêang th·ª≠ l·∫°i...", red, account_info)

        await asyncio.sleep(0.5)  # Wait for 5 seconds before retrying

    log("‚ùå ƒê√£ h·∫øt s·ªë l·∫ßn th·ª≠ l·∫°i. Chuy·ªÉn sang t√°c v·ª• ti·∫øp theo.", red, account_info)
    return None

async def check_user(index, proxy_manager, user_agent):
    account_info = f"T√†i kho·∫£n {index + 1}"
    access_token = await fetch(index + 1, proxy_manager, account_info, user_agent)
    if not access_token:
        return None

    # L·∫•y headers ng·∫´u nhi√™n v·ªõi User-Agent t∆∞∆°ng ·ª©ng
    headers = get_random_headers(user_agent)
    headers['Authorization'] = f'Bearer {access_token}'

    json_payload = {
        "operationName": "QueryTelegramUserMe",
        "variables": {},
        "query": QUERY_USER
    }

    max_retries = 3
    for attempt in range(max_retries):
        proxy = await proxy_manager.get_random_proxy()
        if not proxy:
            log("‚ùå Kh√¥ng c√≥ proxy n√†o kh·∫£ d·ª•ng ƒë·ªÉ s·ª≠ d·ª•ng.", red, account_info)
            return None

        formatted_proxy = format_proxy(proxy)
        if not formatted_proxy:
            log("‚ùå ƒê·ªãnh d·∫°ng proxy kh√¥ng h·ª£p l·ªá sau khi chuy·ªÉn ƒë·ªïi!", red, account_info)
            await proxy_manager.mark_bad_proxy(proxy, account_info)
            continue

        try:
            scraper = cloudscraper.create_scraper()
            proxies = {
                "http": formatted_proxy,
                "https": formatted_proxy
            }
            # L·∫•y headers ng·∫´u nhi√™n v·ªõi User-Agent t∆∞∆°ng ·ª©ng
            current_headers = get_random_headers(user_agent)
            current_headers['Authorization'] = f'Bearer {access_token}'

            response = await asyncio.to_thread(scraper.post, url, headers=current_headers, json=json_payload, proxies=proxies)

            if response.status_code == 200:
                response_data = response.json()
                if 'errors' in response_data:
                    log(f"‚ùå L·ªói Query ID Sai", red, account_info)
                    return None
                else:
                    user_data = response_data['data']['telegramUserMe']
                    return user_data
            else:
                log(f"‚ùå L·ªói v·ªõi tr·∫°ng th√°i {response.status_code}, th·ª≠ l·∫°i...", red, account_info)
                await proxy_manager.mark_bad_proxy(proxy, account_info)
        except Exception as e:
            log(f"‚ùå L·ªói khi ki·ªÉm tra ng∆∞·ªùi d√πng: {e}. ƒê√°nh d·∫•u proxy l√† kh√¥ng t·ªët v√† th·ª≠ l·∫°i.", red, account_info)
            await proxy_manager.mark_bad_proxy(proxy, account_info)

        await asyncio.sleep(0.5)  # Wait before retrying

    log(f"‚ùå ƒê√£ h·∫øt s·ªë l·∫ßn th·ª≠ l·∫°i cho t√†i kho·∫£n {index + 1}.", red, account_info)
    return None

async def activate_energy_recharge_booster(index, proxy_manager, user_agent):
    account_info = f"T√†i kho·∫£n {index + 1}"
    access_token = await fetch(index + 1, proxy_manager, account_info, user_agent)
    if not access_token:
        return None

    # L·∫•y headers ng·∫´u nhi√™n v·ªõi User-Agent t∆∞∆°ng ·ª©ng
    headers = get_random_headers(user_agent)
    headers['Authorization'] = f'Bearer {access_token}'

    recharge_booster_payload = {
        "operationName": "telegramGameActivateBooster",
        "variables": {"boosterType": "Recharge"},
        "query": QUERY_BOOSTER
    }

    max_retries = 3
    for attempt in range(max_retries):
        proxy = await proxy_manager.get_random_proxy()
        if not proxy:
            log("‚ùå Kh√¥ng c√≥ proxy n√†o kh·∫£ d·ª•ng ƒë·ªÉ s·ª≠ d·ª•ng.", red, account_info)
            return None

        formatted_proxy = format_proxy(proxy)
        if not formatted_proxy:
            log("‚ùå ƒê·ªãnh d·∫°ng proxy kh√¥ng h·ª£p l·ªá sau khi chuy·ªÉn ƒë·ªïi!", red, account_info)
            await proxy_manager.mark_bad_proxy(proxy, account_info)
            continue

        try:
            scraper = cloudscraper.create_scraper()
            proxies = {
                "http": formatted_proxy,
                "https": formatted_proxy
            }
            # L·∫•y headers ng·∫´u nhi√™n v·ªõi User-Agent t∆∞∆°ng ·ª©ng
            current_headers = get_random_headers(user_agent)
            current_headers['Authorization'] = f'Bearer {access_token}'

            response = await asyncio.to_thread(scraper.post, url, headers=current_headers, json=recharge_booster_payload, proxies=proxies)

            if response.status_code == 200:
                response_data = response.json()
                if response_data and 'data' in response_data and 'telegramGameActivateBooster' in response_data['data']:
                    new_energy = response_data['data']['telegramGameActivateBooster']['currentEnergy']
                    log(f"N·∫°p nƒÉng l∆∞·ª£ng th√†nh c√¥ng. NƒÉng l∆∞·ª£ng hi·ªán t·∫°i: {new_energy}", green, account_info)
                    return new_energy
                else:
                    log("‚ùå Kh√¥ng th·ªÉ k√≠ch ho·∫°t Recharge Booster: D·ªØ li·ªáu kh√¥ng ƒë·∫ßy ƒë·ªß ho·∫∑c kh√¥ng c√≥.", red, account_info)
            else:
                log(f"‚ùå G·∫∑p s·ª± c·ªë v·ªõi m√£ tr·∫°ng th√°i {response.status_code}, th·ª≠ l·∫°i...", red, account_info)
                await proxy_manager.mark_bad_proxy(proxy, account_info)
        except Exception as e:
            log(f"‚ùå L·ªói khi k√≠ch ho·∫°t Recharge Booster: {e}. ƒê√°nh d·∫•u proxy l√† kh√¥ng t·ªët v√† th·ª≠ l·∫°i.", red, account_info)
            await proxy_manager.mark_bad_proxy(proxy, account_info)

        await asyncio.sleep(0.5)  # Wait before retrying

    log("‚ùå ƒê√£ h·∫øt s·ªë l·∫ßn th·ª≠ l·∫°i khi k√≠ch ho·∫°t Recharge Booster.", red, account_info)
    return None

async def activate_booster(index, proxy_manager, user_agent):
    account_info = f"T√†i kho·∫£n {index + 1}"
    access_token = await fetch(index + 1, proxy_manager, account_info, user_agent)
    if not access_token:
        return None

    # L·∫•y headers ng·∫´u nhi√™n v·ªõi User-Agent t∆∞∆°ng ·ª©ng
    headers = get_random_headers(user_agent)
    headers['Authorization'] = f'Bearer {access_token}'

    turbo_booster_payload = {
        "operationName": "telegramGameActivateBooster",
        "variables": {"boosterType": "Turbo"},
        "query": QUERY_BOOSTER
    }

    max_retries = 3
    for attempt in range(max_retries):
        proxy = await proxy_manager.get_random_proxy()
        if not proxy:
            log("‚ùå Kh√¥ng c√≥ proxy n√†o kh·∫£ d·ª•ng ƒë·ªÉ s·ª≠ d·ª•ng.", red, account_info)
            return None

        formatted_proxy = format_proxy(proxy)
        if not formatted_proxy:
            log("‚ùå ƒê·ªãnh d·∫°ng proxy kh√¥ng h·ª£p l·ªá sau khi chuy·ªÉn ƒë·ªïi!", red, account_info)
            await proxy_manager.mark_bad_proxy(proxy, account_info)
            continue

        try:
            scraper = cloudscraper.create_scraper()
            proxies = {
                "http": formatted_proxy,
                "https": formatted_proxy
            }
            # L·∫•y headers ng·∫´u nhi√™n v·ªõi User-Agent t∆∞∆°ng ·ª©ng
            current_headers = get_random_headers(user_agent)
            current_headers['Authorization'] = f'Bearer {access_token}'

            response = await asyncio.to_thread(scraper.post, url, headers=current_headers, json=turbo_booster_payload, proxies=proxies)

            if response.status_code == 200:
                response_data = response.json()
                if 'data' in response_data and 'telegramGameActivateBooster' in response_data['data']:
                    current_health = response_data['data']['telegramGameActivateBooster']['currentBoss']['currentHealth']
                    if current_health == 0:
                        log("Boss ƒë√£ b·ªã h·∫° g·ª•c, chuy·ªÉn boss ti·∫øp theo...", yellow, account_info)
                        await set_next_boss(index, proxy_manager, user_agent)
                    else:
                        initial_hit = 500000000
                        for _ in range(10):
                            total_hit = initial_hit
                            for retry in range(3):
                                tap_payload = {
                                    "operationName": "MutationGameProcessTapsBatch",
                                    "variables": {
                                        "payload": {
                                            "nonce": generate_random_nonce(),
                                            "tapsCount": int(total_hit)
                                        }
                                    },
                                    "query": MUTATION_GAME_PROCESS_TAPS_BATCH
                                }

                                tap_result = await submit_taps(index, tap_payload, proxy_manager, account_info, user_agent)
                                if tap_result is None:
                                    log(f"‚ùå G·∫∑p s·ª± c·ªë khi tap, th·ª≠ l·∫°i l·∫ßn {retry + 1} v·ªõi {total_hit//2} taps...", yellow, account_info)
                                    total_hit //= 2
                                    if retry == 2:
                                        log("‚ùå Kh√¥ng th·ªÉ tap sau 3 l·∫ßn th·ª≠. Chuy·ªÉn sang v√≤ng l·∫∑p ti·∫øp theo.", red, account_info)
                                    await asyncio.sleep(0.5)
                                    continue

                                if isinstance(tap_result, dict) and 'data' in tap_result and 'telegramGameProcessTapsBatch' in tap_result['data']:
                                    tap_data = tap_result['data']['telegramGameProcessTapsBatch']
                                    if tap_data['currentBoss']['currentHealth'] == 0:
                                        log("Boss ƒë√£ b·ªã h·∫° g·ª•c, chuy·ªÉn boss ti·∫øp theo...", yellow, account_info)
                                        await set_next_boss(index, proxy_manager, user_agent)
                                    log(f"ƒêang tap Memefi2 : Balance üíé {tap_data['coinsAmount']} NƒÉng l∆∞·ª£ng : {tap_data['currentEnergy']} / {tap_data['maxEnergy']}", green, account_info)
                                    # Th√™m ƒë·ªô tr·ªÖ gi·ªØa c√°c l·∫ßn tap
                                    await asyncio.sleep(random.uniform(0.5, 1))  # Th√™m delay ng·∫´u nhi√™n gi·ªØa 0.5 ƒë·∫øn 2 gi√¢y
                                    break
                                else:
                                    log(f"‚ùå K·∫øt qu·∫£ tap kh√¥ng h·ª£p l·ªá: {tap_result}", red, account_info)

                                await asyncio.sleep(0.2)

                            if tap_result is None:
                                continue
            else:
                log(f"‚ùå G·∫∑p s·ª± c·ªë v·ªõi m√£ tr·∫°ng th√°i {response.status_code}, th·ª≠ l·∫°i...", red, account_info)
                await proxy_manager.mark_bad_proxy(proxy, account_info)
        except Exception as e:
            log(f"‚ùå L·ªói khi k√≠ch ho·∫°t Turbo Booster: {e}. ƒê√°nh d·∫•u proxy l√† kh√¥ng t·ªët v√† th·ª≠ l·∫°i.", red, account_info)
            await proxy_manager.mark_bad_proxy(proxy, account_info)

        await asyncio.sleep(0.5)  # Wait before retrying

    log("K·∫øt th√∫c qu√° tr√¨nh k√≠ch ho·∫°t Turbo Boost", cyan, account_info)

async def submit_taps(index, json_payload, proxy_manager, account_info="", user_agent=""):
    max_retries = 3
    for attempt in range(max_retries):
        proxy = await proxy_manager.get_random_proxy()
        if not proxy:
            log("‚ùå Kh√¥ng c√≥ proxy n√†o kh·∫£ d·ª•ng ƒë·ªÉ s·ª≠ d·ª•ng.", red, account_info)
            return None

        formatted_proxy = format_proxy(proxy)
        if not formatted_proxy:
            log("‚ùå ƒê·ªãnh d·∫°ng proxy kh√¥ng h·ª£p l·ªá sau khi chuy·ªÉn ƒë·ªïi!", red, account_info)
            await proxy_manager.mark_bad_proxy(proxy, account_info)
            continue

        try:
            access_token = await fetch(index + 1, proxy_manager, account_info, user_agent)
            if not access_token:
                return None

            # L·∫•y headers ng·∫´u nhi√™n v·ªõi User-Agent t∆∞∆°ng ·ª©ng
            headers = get_random_headers(user_agent)
            headers['Authorization'] = f'Bearer {access_token}'

            scraper = cloudscraper.create_scraper()
            proxies = {
                "http": formatted_proxy,
                "https": formatted_proxy
            }

            response = await asyncio.to_thread(scraper.post, url, headers=headers, json=json_payload, proxies=proxies)

            if response.status_code == 200:
                response_data = response.json()
                return response_data
            else:
                log(f"‚ùå Th·∫•t b·∫°i v·ªõi tr·∫°ng th√°i {response.status_code}, th·ª≠ l·∫°i...", red, account_info)
                await proxy_manager.mark_bad_proxy(proxy, account_info)
        except Exception as e:
            log(f"L·ªói: {e}", red, account_info)
            await proxy_manager.mark_bad_proxy(proxy, account_info)

        await asyncio.sleep(0.5)  # Wait before retrying

    log("‚ùå ƒê√£ h·∫øt s·ªë l·∫ßn th·ª≠ l·∫°i cho tap.", red, account_info)
    return None

async def set_next_boss(index, proxy_manager, user_agent):
    account_info = f"T√†i kho·∫£n {index + 1}"
    access_token = await fetch(index + 1, proxy_manager, account_info, user_agent)
    if not access_token:
        return None

    # L·∫•y headers ng·∫´u nhi√™n v·ªõi User-Agent t∆∞∆°ng ·ª©ng
    headers = get_random_headers(user_agent)
    headers['Authorization'] = f'Bearer {access_token}'

    json_payload = {
        "operationName": "telegramGameSetNextBoss",
        "variables": {},
        "query": QUERY_NEXT_BOSS
    }

    max_retries = 3
    for attempt in range(max_retries):
        proxy = await proxy_manager.get_random_proxy()
        if not proxy:
            log("‚ùå Kh√¥ng c√≥ proxy n√†o kh·∫£ d·ª•ng ƒë·ªÉ s·ª≠ d·ª•ng.", red, account_info)
            return None

        formatted_proxy = format_proxy(proxy)
        if not formatted_proxy:
            log("‚ùå ƒê·ªãnh d·∫°ng proxy kh√¥ng h·ª£p l·ªá sau khi chuy·ªÉn ƒë·ªïi!", red, account_info)
            await proxy_manager.mark_bad_proxy(proxy, account_info)
            continue

        try:
            scraper = cloudscraper.create_scraper()
            proxies = {
                "http": formatted_proxy,
                "https": formatted_proxy
            }
            # L·∫•y headers ng·∫´u nhi√™n v·ªõi User-Agent t∆∞∆°ng ·ª©ng
            current_headers = get_random_headers(user_agent)
            current_headers['Authorization'] = f'Bearer {access_token}'

            response = await asyncio.to_thread(scraper.post, url, headers=current_headers, json=json_payload, proxies=proxies)

            if response.status_code == 200:
                response_data = response.json()
                if response_data and 'data' in response_data:
                    log("Boss ti·∫øp theo ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t th√†nh c√¥ng!", green, account_info)
                    return response_data
                else:
                    log("‚ùå Kh√¥ng th·ªÉ ƒë·∫∑t Boss ti·∫øp theo: D·ªØ li·ªáu kh√¥ng ƒë·∫ßy ƒë·ªß ho·∫∑c kh√¥ng c√≥.", red, account_info)
            else:
                log(f"‚ùå G·∫∑p s·ª± c·ªë v·ªõi m√£ tr·∫°ng th√°i {response.status_code}, th·ª≠ l·∫°i...", red, account_info)
                await proxy_manager.mark_bad_proxy(proxy, account_info)
        except Exception as e:
            log(f"‚ùå L·ªói khi ƒë·∫∑t Boss ti·∫øp theo: {e}. ƒê√°nh d·∫•u proxy l√† kh√¥ng t·ªët v√† th·ª≠ l·∫°i.", red, account_info)
            await proxy_manager.mark_bad_proxy(proxy, account_info)

        await asyncio.sleep(0.5)  # Wait before retrying

    log("‚ùå ƒê√£ h·∫øt s·ªë l·∫ßn th·ª≠ l·∫°i khi ƒë·∫∑t Boss ti·∫øp theo.", red, account_info)
    return None

async def check_stat(index, proxy_manager, user_agent):
    account_info = f"T√†i kho·∫£n {index + 1}"
    access_token = await fetch(index + 1, proxy_manager, account_info, user_agent)
    if not access_token:
        return None

    # L·∫•y headers ng·∫´u nhi√™n v·ªõi User-Agent t∆∞∆°ng ·ª©ng
    headers = get_random_headers(user_agent)
    headers['Authorization'] = f'Bearer {access_token}'

    json_payload = {
        "operationName": "QUERY_GAME_CONFIG",
        "variables": {},
        "query": QUERY_GAME_CONFIG
    }

    max_retries = 3
    for attempt in range(max_retries):
        proxy = await proxy_manager.get_random_proxy()
        if not proxy:
            log("‚ùå Kh√¥ng c√≥ proxy n√†o kh·∫£ d·ª•ng ƒë·ªÉ s·ª≠ d·ª•ng.", red, account_info)
            return None

        formatted_proxy = format_proxy(proxy)
        if not formatted_proxy:
            log("‚ùå ƒê·ªãnh d·∫°ng proxy kh√¥ng h·ª£p l·ªá sau khi chuy·ªÉn ƒë·ªïi!", red, account_info)
            await proxy_manager.mark_bad_proxy(proxy, account_info)
            continue

        try:
            scraper = cloudscraper.create_scraper()
            proxies = {
                "http": formatted_proxy,
                "https": formatted_proxy
            }
            # L·∫•y headers ng·∫´u nhi√™n v·ªõi User-Agent t∆∞∆°ng ·ª©ng
            current_headers = get_random_headers(user_agent)
            current_headers['Authorization'] = f'Bearer {access_token}'

            response = await asyncio.to_thread(scraper.post, url, headers=current_headers, json=json_payload, proxies=proxies)

            if response.status_code == 200:
                response_data = response.json()
                if 'errors' in response_data:
                    return None
                else:
                    user_data = response_data['data']['telegramGameGetConfig']
                    return user_data
            else:
                log(f"‚ùå L·ªói v·ªõi tr·∫°ng th√°i {response.status_code}, th·ª≠ l·∫°i...", red, account_info)
                await proxy_manager.mark_bad_proxy(proxy, account_info)
        except Exception as e:
            log(f"‚ùå L·ªói khi ki·ªÉm tra th·ªëng k√™: {e}. ƒê√°nh d·∫•u proxy l√† kh√¥ng t·ªët v√† th·ª≠ l·∫°i.", red, account_info)
            await proxy_manager.mark_bad_proxy(proxy, account_info)

        await asyncio.sleep(0.5)  # Wait before retrying

    log("‚ùå ƒê√£ h·∫øt s·ªë l·∫ßn th·ª≠ l·∫°i cho ki·ªÉm tra th·ªëng k√™.", red, account_info)
    return None

async def animate_energy_recharge(duration):
    frames = ["|", "/", "-", "\\"]
    end_time = time.time() + duration
    while time.time() < end_time:
        remaining_time = int(end_time - time.time())
        for frame in frames:
            log2(f"ƒêang n·∫°p l·∫°i nƒÉng l∆∞·ª£ng {frame} - C√≤n l·∫°i {remaining_time} gi√¢y", cyan)
            await asyncio.sleep(0.25)
    log2("N·∫°p nƒÉng l∆∞·ª£ng ho√†n th√†nh.", green)

async def process_account(index, user_data, first_name, last_name, proxy_manager, user_agent):
    account_info = f"T√†i kho·∫£n {index + 1}: {first_name} {last_name}"
    proxy = await proxy_manager.get_random_proxy()
    if not proxy:
        log("‚ùå Kh√¥ng c√≥ proxy n√†o kh·∫£ d·ª•ng ƒë·ªÉ s·ª≠ d·ª•ng.", red, account_info)
        return

    should_continue_to_next_account = False
    stat_result = await check_stat(index, proxy_manager, user_agent)

    if stat_result is not None:
        user_data = stat_result
        log("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", cyan, account_info)
        log(f"T√†i kho·∫£n {index + 1} : {first_name} {last_name}", cyan, account_info)
        log(f"Balance üíé {user_data.get('coinsAmount', 'Unknown')} NƒÉng l∆∞·ª£ng : {user_data.get('currentEnergy', 'Unknown')} / {user_data.get('maxEnergy', 'Unknown')}", green, account_info)
        log(f"Boss LV {user_data['currentBoss'].get('level', 'Unknown')} ‚ù§Ô∏è  {user_data['currentBoss'].get('currentHealth', 'Unknown')} - {user_data['currentBoss'].get('maxHealth', 'Unknown')}", green, account_info)
        log(f"Turbo {user_data['freeBoosts'].get('currentTurboAmount', 'Unknown')} Recharge {user_data['freeBoosts'].get('currentRefillEnergyAmount', 'Unknown')}", green, account_info)
    else:
        log(f"‚ö†Ô∏è C·∫£nh b√°o: Kh√¥ng th·ªÉ truy xu·∫•t d·ªØ li·ªáu ng∆∞·ªùi d√πng cho t√†i kho·∫£n {index + 1}. Chuy·ªÉn sang t√†i kho·∫£n ti·∫øp theo.", red, account_info)
        return

    if 'currentBoss' in user_data:
        lv_boss = user_data['currentBoss']['level']
        mau_boss = user_data['currentBoss']['currentHealth']
        if lv_boss >= 10 and mau_boss == 0:
            log(f"=================== {first_name} {last_name} K·∫æT TH√öC ====================", magenta, account_info)
            should_continue_to_next_account = True
        if mau_boss == 0:
            log("Boss ƒë√£ b·ªã h·∫° g·ª•c, chuy·ªÉn boss ti·∫øp theo...", yellow, account_info)
            await set_next_boss(index, proxy_manager, user_agent)

    log("B·∫Øt ƒë·∫ßu tap", green, account_info)

    energy_now = user_data['currentEnergy']
    recharge_available = user_data['freeBoosts']['currentRefillEnergyAmount']
    if not should_continue_to_next_account:
        while energy_now > 500 or recharge_available > 0:
            total_tap = random.randint(100, 200)
            tap_payload = {
                "operationName": "MutationGameProcessTapsBatch",
                "variables": {
                    "payload": {
                        "nonce": generate_random_nonce(),
                        "tapsCount": total_tap
                    }
                },
                "query": MUTATION_GAME_PROCESS_TAPS_BATCH
            }

            tap_result = await submit_taps(index, tap_payload, proxy_manager, account_info, user_agent)
            if tap_result is not None:
                user_data = await check_stat(index, proxy_manager, user_agent)
                if user_data is None:
                    log(f"‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i sau khi tap, chuy·ªÉn sang t√†i kho·∫£n ti·∫øp theo.", red, account_info)
                    break
                energy_now = user_data['currentEnergy']
                recharge_available = user_data['freeBoosts'].get('currentRefillEnergyAmount', 0)
                log(f"ƒêang tap Memefi2 : Balance üíé {user_data.get('coinsAmount', 'Unknown')} NƒÉng l∆∞·ª£ng : {energy_now} / {user_data.get('maxEnergy', 'Unknown')}", green, account_info)
            else:
                log(f"‚ùå L·ªói v·ªõi tr·∫°ng th√°i {tap_result}, th·ª≠ l·∫°i...", red, account_info)

            # Th√™m ƒë·ªô tr·ªÖ ng·∫´u nhi√™n t·ª´ 1 ƒë·∫øn 3 gi√¢y
            await asyncio.sleep(random.uniform(0.5, 1))

            if energy_now < 500:
                if recharge_available > 0:
                    log("H·∫øt nƒÉng l∆∞·ª£ng, k√≠ch ho·∫°t Recharge...", yellow, account_info)
                    await activate_energy_recharge_booster(index, proxy_manager, user_agent)
                    user_data = await check_stat(index, proxy_manager, user_agent)
                    if user_data is None:
                        log(f"‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i sau khi Recharge, chuy·ªÉn sang t√†i kho·∫£n ti·∫øp theo.", red, account_info)
                        break
                    energy_now = user_data['currentEnergy']
                    recharge_available = user_data['freeBoosts'].get('currentRefillEnergyAmount', 0)
                else:
                    log("NƒÉng l∆∞·ª£ng d∆∞·ªõi 500 v√† kh√¥ng c√≤n Recharge, chuy·ªÉn sang t√†i kho·∫£n ti·∫øp theo.", yellow, account_info)
                    break

            if user_data['freeBoosts'].get('currentTurboAmount', 0) > 0:
                await activate_booster(index, proxy_manager, user_agent)
    if should_continue_to_next_account:
        return

async def main():
    log("B·∫Øt ƒë·∫ßu Memefi bot...", magenta)

    # ƒê·ªçc proxy t·ª´ proxy.txt th√¥ng qua ProxyManager
    proxy_manager = ProxyManager('proxy.txt')
    if not proxy_manager.all_proxies:
        log("‚ùå Kh√¥ng c√≥ proxy n√†o ƒë·ªÉ s·ª≠ d·ª•ng. D·ª´ng ch∆∞∆°ng tr√¨nh.", red)
        return

    # Ki·ªÉm tra c√°c proxy ngay khi b·∫Øt ƒë·∫ßu
    await proxy_manager.validate_proxies()
    if not proxy_manager.valid_proxies:
        log("‚ùå Kh√¥ng c√≤n proxy n√†o h·ª£p l·ªá sau khi ki·ªÉm tra. D·ª´ng ch∆∞∆°ng tr√¨nh.", red)
        return

    # ƒê·ªçc data.txt v√† useragent.txt
    try:
        with open('data.txt', 'r') as data_file:
            account_lines = data_file.readlines()

        if not account_lines:
            log("‚ùå data.txt tr·ªëng!", red)
            return

        with open('useragent.txt', 'r') as ua_file:
            useragent_lines = ua_file.readlines()

        if not useragent_lines:
            log("‚ùå useragent.txt tr·ªëng!", red)
            return

        if len(useragent_lines) < len(account_lines):
            log("‚ùå S·ªë d√≤ng trong useragent.txt √≠t h∆°n s·ªë d√≤ng trong data.txt!", red)
            return
        else:
            # N·∫øu useragent.txt c√≥ nhi·ªÅu h∆°n, ch·ªâ l·∫•y ƒë·ªß s·ªë l∆∞·ª£ng t∆∞∆°ng ·ª©ng v·ªõi data.txt
            useragent_lines = useragent_lines[:len(account_lines)]

    except FileNotFoundError as e:
        log(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {e.filename}", red)
        return

    while True:
        accounts = []

        # T·∫°o danh s√°ch c√°c nhi·ªám v·ª• ki·ªÉm tra ng∆∞·ªùi d√πng ƒë·ªìng th·ªùi
        check_user_tasks = [
            check_user(index, proxy_manager, useragent_lines[index].strip())
            for index, line in enumerate(account_lines)
        ]

        # Th·ª±c hi·ªán ki·ªÉm tra ng∆∞·ªùi d√πng ƒë·ªìng th·ªùi
        check_user_results = await asyncio.gather(*check_user_tasks, return_exceptions=True)

        for index, result in enumerate(check_user_results):
            account_info = f"T√†i kho·∫£n {index + 1}"
            if isinstance(result, Exception):
                log(f"‚ùå {account_info}: L·ªói x·∫£y ra trong qu√° tr√¨nh ki·ªÉm tra ng∆∞·ªùi d√πng.", red, account_info)
                continue

            if result is not None:
                first_name = result.get('firstName', 'Unknown')
                last_name = result.get('lastName', 'Unknown')
                user_agent = useragent_lines[index].strip()
                accounts.append((index, result, first_name, last_name, user_agent))
            else:
                log(f"‚ùå {account_info}: Token kh√¥ng h·ª£p l·ªá ho·∫∑c c√≥ l·ªói x·∫£y ra", red, account_info)

        # ƒê·∫∑t gi·ªõi h·∫°n s·ªë l∆∞·ª£ng t√†i kho·∫£n ƒë∆∞·ª£c x·ª≠ l√Ω ƒë·ªìng th·ªùi
        semaphore = asyncio.Semaphore(30)  # Gi·ªõi h·∫°n ·ªü m·ª©c 5

        async def process_account_with_semaphore(*args, **kwargs):
            async with semaphore:
                await process_account(*args, **kwargs)

        # T·∫°o danh s√°ch c√°c nhi·ªám v·ª• x·ª≠ l√Ω t√†i kho·∫£n ƒë·ªìng th·ªùi v·ªõi semaphore
        account_tasks = [
            process_account_with_semaphore(index, result, first_name, last_name, proxy_manager, user_agent)
            for index, result, first_name, last_name, user_agent in accounts
        ]

        # Th·ª±c hi·ªán x·ª≠ l√Ω t√†i kho·∫£n ƒë·ªìng th·ªùi
        await asyncio.gather(*account_tasks, return_exceptions=True)

        log("=== [ T·∫§T C·∫¢ T√ÄI KHO·∫¢N ƒê√É ƒê∆Ø·ª¢C X·ª¨ L√ù ] ===", magenta)
        await animate_energy_recharge(600)  # Th√™m ƒë·ªô tr·ªÖ tr∆∞·ªõc khi l·∫∑p l·∫°i v√≤ng while

if __name__ == "__main__":
    asyncio.run(main())
